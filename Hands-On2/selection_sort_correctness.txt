Selection Sort:

void selection_sort(int a[], int n) {
    int min;
    for(int i=0; i<=n-2; i++) {
        min = i;
        for(int j=i+1; j<=n-1; j++) {
            if(a[j]<a[min]) {
                min=j;
            }
        }
        swap(a[min],a[i]);
    }
}


Correctness proof:

Loop Invariant: At the start of each iteration of the outer loop when i is the loop index, the subarray a[0...i-1] contains the smallest i elements of the original array a, sorted in ascending order.

Initialization: Before the first iteration of the outer loop when i = 0, the subarray a[0...i-1] is empty. An empty subarray is trivially sorted. Therefore, the loop invariant holds before the first iteration begins.

2. Maintenance: Assume the loop invariant holds at the start of the i-th iteration. This means that the subarray a[0...i-1] contains the smallest i elements of the array in sorted order. In the i-th iteration, the algorithm finds the smallest element in the remaining unsorted part of the array a[i...n-1] and swaps it with the element at index i. After this swap, The subarray a[0...i] now contains the smallest i+1 elements of the original array, with the first i elements already sorted (from previous iterations) and the (i+1)-th element placed in its correct position. Therefore, the loop invariant is maintained.

3. Termination: When the outer loop ends, i = n - 1. At this point, the subarray a[0...n-2] contains the smallest n-1 elements of the array in sorted order, as the last element a[n-1] has not been processed yet. The final iteration places the smallest remaining element in its correct position, so the entire array a[0...n-1] is sorted. Hence, the algorithm is correct.
