Selection Sort correctness:

Loop invariant: At the start of each iteration of the outer loop, the subarray A[1...i-1] contains the smallest i-1 elements of the original array, sorted in ascending order.

Initialization: The loop invariant holds before the first iteration of the loop, when i = 1. Initially, the subarray A[1...i-1] is empty. An empty array is trivially sorted, which confirms that the loop invariant holds before the first iteration of the loop.

Maintenance: Each iteration of the loop maintains the loop invariant. The loop invariant states that at the start of each iteration i of the for loop, the subarray A[1...i-1] contains the smallest i-1 elements of the original array A, but in sorted order. 

During each iteration, the body of the loop selects the smallest element in the subarray A[i...n], where n is the length of the array, and swaps it with the element at index i. This ensures that the element at index i is in its correct sorted position relative to the elements in the subarray A[1...i]. As a result, after the swap, the subarray A[1...i] contains the smallest i elements of the original array A in sorted order. 

Termination: The for loop terminates when i > n. Given that i starts from 1 and increments by 1 in each iteration, i must be n + 1 when the loop terminates. Substituting n + 1 for i in the loop invariant, we see that the subarray A[1...n] consists of the smallest n elements of the original array A in sorted order. Observing that A[1...n] is the entire array, we conclude that the entire array is sorted. Thus, the algorithm is correct.

